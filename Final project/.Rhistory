et_w3_data$waz <- getCohortWGS(data=et_w3_data,
sexObserved = "hh_s1q03",
firstPart = "weight_kg",
secondPart = "age_months",
index = "wfa")
et_w3_data$haz <- getCohortWGS(data=et_w3_data,
sexObserved = "hh_s1q03",
firstPart = "height_cm",
secondPart = "age_months",
index = "hfa")
#this isn't working - using the anthro_zscores package below
# et_w3_data$whz <- getCohortWGS(data=et_w3_data,
#                                  sexObserved = "hh_s1q03",
#                                  firstPart = "weight_kg",
#                                  secondPart = "height_cm",
#                                  index = "wfh")
library(anthro)
zscore <- with(et_w3_data,
anthro_zscores(
sex = hh_s1q03,
age = age_months,
is_age_in_month = TRUE,
weight = weight_kg,
lenhei = height_cm))
et_w3_data <- cbind(et_w3_data, zscore)
#renaming variables
et_w3_data <- et_w3_data %>%
rename(
HAZ = zlen,
WAZ = zwei,
WHZ = zwfl
)
et_w3_data$stunted <- ifelse(et_w3_data$HAZ <= -2, 1, 0)
et_w3_data$wasted <- ifelse(et_w3_data$WHZ <= -2, 1, 0)
#generating individual weights
et_w3_data$indiv_wgt <- et_w3_data$pw_w3*et_w3_data$hh_members
#Bringing in maps
library(rgdal)
#on laptop
#et_admin2_map <- readOGR("/Users/david/Documents/GitHub/Spatial_epi/Final project/Map data/ETH_admin_SHP",stringsAsFactors=F)
#pc in office
# et_admin2_map <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ETH_admin_SHP", stringsAsFactors=F)
# et_admin1_map <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ETH-level_1_SHP", stringsAsFactors=F)
# et_boundary_map <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ETH_boundaries_SHP", stringsAsFactors=F)   #this looks like an admin 2 map
#new region and zone maps that match up with data
et_admin1_map.3 <- readOGR("C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ethiopiaregion", stringsAsFactors = F)
et_admin2_map.2 <- readOGR("C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ethiopia-zone", stringsAsFactors = F)
#home desktop
# et_admin1_map.2 <- readOGR("/Users/david/Documents/GitHub/Spatial_epi/Final project/Map data/ETH-level_1_SHP", stringsAsFactors = F)
# et_admin2_map <- readOGR("/Users/david/Documents/GitHub/Spatial_epi/Final project/Map data/ETH_admin_SHP", stringsAsFactors = F)
#new region and zone maps that match up with data
# et_admin1_map.3 <- readOGR("/Users/david/Desktop/Dave/school/Spatial Epi/Final project/map data/ethiopiaregion", stringsAsFactors = F)
# et_admin2_map.2 <- readOGR("/Users/david/Desktop/Dave/school/Spatial Epi/Final project/map data/ethiopia-zone", stringsAsFactors = F)
#changing utm to lat and long
#sputm <- SpatialPoints(randompoints, proj4string = CRS("+proj=utm +zone=37 +ellps=clrk80 +towgs84=-166,-15,204,0,0,0,0"))  #don't need this
et_admin1_map <- spTransform(et_admin1_map.3, CRS("+proj=longlat +datum=WGS84"))
et_admin2_map <- spTransform(et_admin2_map.2, CRS("+proj=longlat + datum=WGS84"))
#starting with those that include HAZ estimates
et_w3_data <- subset(et_w3_data, !is.na(et_w3_data$HAZ))
#keeping only rural respondents
et_w3_data <- subset(et_w3_data, et_w3_data$rural==1)
#creating new region string variable
et_w3_data$region.string <- as.character(et_w3_data$region)
et_w3_data$zone.string <- as.character(et_w3_data$zone)
et_w3_data$region.string[et_w3_data$region.string=="1"] <- "01"
et_w3_data$region.string[et_w3_data$region.string=="2"] <- "02"
et_w3_data$region.string[et_w3_data$region.string=="3"] <- "03"
et_w3_data$region.string[et_w3_data$region.string=="4"] <- "04"
et_w3_data$region.string[et_w3_data$region.string=="5"] <- "05"
et_w3_data$region.string[et_w3_data$region.string=="6"] <- "06"
et_w3_data$region.string[et_w3_data$region.string=="7"] <- "07"
et_w3_data$zone.string[et_w3_data$zone.string=="1"] <- "01"
et_w3_data$zone.string[et_w3_data$zone.string=="2"] <- "02"
et_w3_data$zone.string[et_w3_data$zone.string=="3"] <- "03"
et_w3_data$zone.string[et_w3_data$zone.string=="4"] <- "04"
et_w3_data$zone.string[et_w3_data$zone.string=="5"] <- "05"
et_w3_data$zone.string[et_w3_data$zone.string=="6"] <- "06"
et_w3_data$zone.string[et_w3_data$zone.string=="7"] <- "07"
et_w3_data$zone.string[et_w3_data$zone.string=="8"] <- "08"
et_w3_data$zone.string[et_w3_data$zone.string=="9"] <- "09"
et_w3_data <- within(et_w3_data, zone.st <- paste(region.string, zone.string, sep=""))
#only keeping those with zone codes that exist in the map
et_w3_data <- subset(et_w3_data, zone.st != "0106" | zone.st != "0311" | zone.st != "0415" | zone.st != "0416" | zone.st != "0606" | zone.st != "0714" | zone.st != "0715" | zone.st != "0716" | zone.st != "0722" | zone.st != "1204" | zone.st != "1402" | zone.st != "1403" | zone.st != "1404" | zone.st != "1405" | zone.st != "1406" | zone.st != "1407" | zone.st != "1408" | zone.st != "1409" | zone.st != "1410")
#developing stratas
et_w3_data$strata[et_w3_data$rural==1] <- et_w3_data$region                    #strata is region if rural
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 1] <- 16
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 3] <- 17
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 4] <- 18
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 7] <- 19
et_w3_data$strata[et_w3_data$rural==2 & (et_w3_data$region == 5 | et_w3_data$region == 6 | et_w3_data$region == 12 | et_w3_data$region == 13 | et_w3_data$region == 15)] <- 20
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 1] <- 21
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 3] <- 22
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 4] <- 23
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 7] <- 24
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 14] <- 25
et_w3_data$strata[et_w3_data$rural==3 & (et_w3_data$region == 5 | et_w3_data$region == 6 | et_w3_data$region == 12 | et_w3_data$region == 13 | et_w3_data$region == 15)] <- 26
map_desc <- as.data.frame(et_admin1_map)
map_desc.2 <- as.data.frame(et_admin2_map)
nb.r <- poly2nb(et_admin1_map, queen=F, row.names = et_admin1_map$REG_P_CODE)    #couldn't put rownames here - do I need those?
mat <- nb2mat(nb.r, style="B", zero.policy = TRUE)
colnames(mat) <- rownames(mat)
mat <- as.matrix(mat[1:dim(mat)[1], 1:dim(mat)[1]])
mat
nb.r.zone <- poly2nb(et_admin2_map, queen=F, row.names = et_admin2_map$ZON_P_CODE)
mat.2 <- nb2mat(nb.r.zone, style="B", zero.policy=TRUE)
colnames(mat.2) <- rownames(mat.2)
mat.2 <- as.matrix(mat.2[1:dim(mat.2)[1], 1:dim(mat.2)[1]])
mat.2
#getting regional means
library(survey)
design <- svydesign(ids = ~1, weights = ~indiv_wgt,
strata = ~strata, nest=TRUE, cluster= ~ea_id2, data=et_w3_data)
direct_region <- svyby(~stunted, ~region, design, svymean)
head(direct_region)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = NULL, weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = NULL, weightVar = "indiv_wgt", regionVar = "region",
clusterVar = NULL, CI=0.95)
direct_region
layerContrib=merge(et_admin1_map,toplot_direct, by.x='REG_P_CODE', by.y='region',all.x=F)
#getting regional means
library(survey)
design <- svydesign(ids = ~1, weights = ~indiv_wgt,
strata = ~strata, nest=TRUE, cluster= ~ea_id2, data=et_w3_data)
direct <- svyby(~stunted, ~region, design, svymean)
head(direct_region)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = NULL, weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "~1", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "strata", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "strata", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
#getting regional means
library(survey)
design <- svydesign(ids = ~1, weights = ~indiv_wgt,
strata = ~strata, nest=TRUE, cluster= ~ea_id2, data=et_w3_data)
direct <- svyby(~stunted, ~strata + region, design, svymean)
head(direct_region)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "strata", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
mat
direct
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r=inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(zscorer)) install.packages("zscorer")
if (!require(naniar)) install.packages("naniar")
if (!require(anthro)) install.packages("anthro")
if (!require(tmaptools)) install.packages("tmaptools")
if (!require(rmapshaper)) install.packages("rmapshaper")
if (!require(tmap)) install.packages("tmap")
if (!require(rmapshaper)) install.packages("rmapshaper")
rm(list=ls())
library(foreign)
library(haven)
#Having trouble installing INLA on pc in office
#install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
library(zscorer)
library(naniar)
#loading health data
link_3 = "https://github.com/dmccoomes/Spatial_epi/raw/master/Final%20project/Raw%20data/ESS%20Wave%203/Ethiopia%20Wave%203%20data/ETH_2015_ESS_v02_M_STATA8/Household/sect3_hh_w3.dta"
et_w3_anth <- read_dta(url(link_3))
# head(et_w3_anth)
# summary(et_w3_anth)
# View(et_w3_anth)
#keeping only those we need
keep_vars.anth <- c("household_id2", "rural", "pw_w3", "individual_id2", "ea_id2", "saq01", "saq02", "saq03", "saq04", "saq05", "saq06", "saq07", "hh_s3q12_a", "hh_s3q20a", "hh_s3q20d", "hh_s3q20e", "hh_s3q21_a", "hh_s3q21_b", "hh_s3q21_c", "hh_s3q22", "hh_s3q23")
et_w3_anth <- et_w3_anth[keep_vars.anth]
#renaming variables
et_w3_anth <- et_w3_anth %>%
rename(
u_5 = hh_s3q12_a,
diarrhea_2wk = hh_s3q20a,
breastfed_yn = hh_s3q20e,
birth_day = hh_s3q21_a,
birth_month = hh_s3q21_b,
birth_year = hh_s3q21_c,
weight_kg = hh_s3q22,
height_cm = hh_s3q23
)
#downloading cover sheet data
link_cover = "https://github.com/dmccoomes/Spatial_epi/raw/master/Final%20project/Raw%20data/ESS%20Wave%203/Ethiopia%20Wave%203%20data/ETH_2015_ESS_v02_M_STATA8/Household/sect_cover_hh_w3.dta"
et_w3_cover <- read_dta(url(link_cover))
# View(et_w3_cover)
et_w3_cover <- et_w3_cover %>%
rename(
int_day=hh_saq13_a,
int_month=hh_saq13_b,
int_year=hh_saq13_c
)
#downloading section 1
link_1 = "https://github.com/dmccoomes/Spatial_epi/raw/master/Final%20project/Raw%20data/ESS%20Wave%203/Ethiopia%20Wave%203%20data/ETH_2015_ESS_v02_M_STATA8/Household/sect1_hh_w3.dta"
et_w3_hh <- read_dta(url(link_1))
#get number in HH
et_w3_hh$hh_member <- 1
et_w3_hh_2 <- et_w3_hh %>%
group_by(household_id2) %>%
summarize(hh_members = sum(hh_member))
et_w3_hh_2 <- et_w3_hh_2[c("household_id2", "hh_members")]
keep_vars.hh <- c("household_id2", "rural", "pw_w3", "individual_id2", "ea_id2", "saq01", "saq02", "saq03", "saq04", "saq05", "saq06", "saq07", "hh_s1q03", "hh_s1q04a", "hh_s1q04b", "hh_s1q04h", "saq08")
et_w3_hh <- et_w3_hh[keep_vars.hh]
#Merging household cover data with health data
#et_w3_health <- merge(et_w3_anth, et_w3_cover, no.dups=TRUE)    #I don't think we need the cover anymore
#View(et_w3_health)
et_w3_hh <- merge(et_w3_hh, et_w3_hh_2, no.dups=TRUE)
et_w3_health <- merge(et_w3_anth, et_w3_hh, no.dups=TRUE)
#merge in geovariables
link_geovars = "https://github.com/dmccoomes/Spatial_epi/raw/master/Final%20project/Raw%20data/ESS%20Wave%203/Ethiopia%20Wave%203%20data/ETH_2015_ESS_v02_M_STATA8/Geovariables/ETH_HouseholdGeovars_y3.dta"
et_w3_geovars <- read_dta(url(link_geovars))
#merging with dataset
et_w3_health <- merge(et_w3_health, et_w3_geovars, no.dups=TRUE)
et_w3_health <- et_w3_health %>%
rename(
latitude=lat_dd_mod,
longitude=lon_dd_mod
)
#keeping only some variables
#keep_vars <- c("household_id2", "rural", "pw_w3", "individual_id2", "ea_id2", "saq01")
#generating age in months
et_w3_health$age_months <- et_w3_health$hh_s1q04a*12 + et_w3_health$hh_s1q04b
#subset - only keep children under 5
#et_w3_data <- subset(et_w3_health, u_5==1)
et_w3_health$female <- et_w3_health$hh_s1q03
et_w3_data <- subset(et_w3_health, age_months <=60)
#recoding sex
et_w3_health[,"female"] <- ifelse(et_w3_health[,"female"]==1,0, ifelse(et_w3_health[,"female"]==2,1, 99))
#renaming variables
et_w3_data <- et_w3_data %>%
rename(
age=hh_s1q04h,
region=saq01,
zone=saq02,
woreda=saq03,
town=saq04,
subcity=saq05,
kebele=saq06,
ea=saq07,
hh=saq08
)
#generating age in days
et_w3_data$age_days <- et_w3_data$age_months*30
et_w3_data <- et_w3_data  %>%
select(household_id2, rural, pw_w3, individual_id2, ea_id2, region, zone, woreda, town, subcity, kebele, ea, hh, u_5, weight_kg, height_cm,
birth_month, birth_year, age, age_months, female, hh_s1q03, age_days, latitude, longitude, hh_members)
#summary(et_w3_data$age)
# colnames(et_w3_data)
# summary(et_w3_data$age)
#keeping only those that report
#Generating age using date of interview and year of birth
#et_w3_health$year <- et_w3_health$ et_w3_health$hh_saq13_c
#adding anthropometric data
#addWGSR(data=et_w3_data, sex="hh_s1q03", firstPart="weight_kg", secondPart="height_cm", thirdPart="age_days", index="wfa", standing=NULL, output="wfa_z", digits=3)
#setting as null if height is not between 45-120 cm
#et_w3_health[,"height_cm"] <- ifelse(et_w3_health[,"height_cm"]<45,NA, ifelse(et_w3_health[,"height_cm"]>120, NA, et_w3_health[,"height_cm"]))
et_w3_data$height_cm[et_w3_data$height_cm<45] <- NA
et_w3_data$height_cm[et_w3_data$height_cm>120] <- NA
et_w3_data$age_months[et_w3_data$age_months>60] <- NA
# summary(et_w3_data$age_months)
# summary(et_w3_data$height_cm)
# et_w3_data$waz <- getAllWGS(data=et_w3_data, sex="hh_s1q03", weight="weight_kg", height="height_cm", age="age_months", index="wfa")
# et_w3_data$haz <- getAllWGS(data=et_w3_data, sex="hh_s1q03", weight="weight_kg", height="height_cm", age="age_months", index="hfa")
# et_w3_data$whz <- getAllWGS(data=et_w3_data, sex="hh_s1q03", weight="weight_kg", height="height_cm", age="age_months", index="wfh")
#et_w3_data$all <- getAllWGS(data=et_w3_data, sex="hh_s1q03", weight="weight_kg", height="height_cm", age="age_months", index="all")
et_w3_data$waz <- getCohortWGS(data=et_w3_data,
sexObserved = "hh_s1q03",
firstPart = "weight_kg",
secondPart = "age_months",
index = "wfa")
et_w3_data$haz <- getCohortWGS(data=et_w3_data,
sexObserved = "hh_s1q03",
firstPart = "height_cm",
secondPart = "age_months",
index = "hfa")
#this isn't working - using the anthro_zscores package below
# et_w3_data$whz <- getCohortWGS(data=et_w3_data,
#                                  sexObserved = "hh_s1q03",
#                                  firstPart = "weight_kg",
#                                  secondPart = "height_cm",
#                                  index = "wfh")
library(anthro)
zscore <- with(et_w3_data,
anthro_zscores(
sex = hh_s1q03,
age = age_months,
is_age_in_month = TRUE,
weight = weight_kg,
lenhei = height_cm))
et_w3_data <- cbind(et_w3_data, zscore)
#renaming variables
et_w3_data <- et_w3_data %>%
rename(
HAZ = zlen,
WAZ = zwei,
WHZ = zwfl
)
et_w3_data$stunted <- ifelse(et_w3_data$HAZ <= -2, 1, 0)
et_w3_data$wasted <- ifelse(et_w3_data$WHZ <= -2, 1, 0)
#generating individual weights
et_w3_data$indiv_wgt <- et_w3_data$pw_w3*et_w3_data$hh_members
#Bringing in maps
library(rgdal)
#on laptop
#et_admin2_map <- readOGR("/Users/david/Documents/GitHub/Spatial_epi/Final project/Map data/ETH_admin_SHP",stringsAsFactors=F)
#pc in office
# et_admin2_map <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ETH_admin_SHP", stringsAsFactors=F)
# et_admin1_map <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ETH-level_1_SHP", stringsAsFactors=F)
# et_boundary_map <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ETH_boundaries_SHP", stringsAsFactors=F)   #this looks like an admin 2 map
#new region and zone maps that match up with data
et_admin1_map.3 <- readOGR("C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ethiopiaregion", stringsAsFactors = F)
et_admin2_map.2 <- readOGR("C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\Final project\\Map data\\ethiopia-zone", stringsAsFactors = F)
#home desktop
# et_admin1_map.2 <- readOGR("/Users/david/Documents/GitHub/Spatial_epi/Final project/Map data/ETH-level_1_SHP", stringsAsFactors = F)
# et_admin2_map <- readOGR("/Users/david/Documents/GitHub/Spatial_epi/Final project/Map data/ETH_admin_SHP", stringsAsFactors = F)
#new region and zone maps that match up with data
# et_admin1_map.3 <- readOGR("/Users/david/Desktop/Dave/school/Spatial Epi/Final project/map data/ethiopiaregion", stringsAsFactors = F)
# et_admin2_map.2 <- readOGR("/Users/david/Desktop/Dave/school/Spatial Epi/Final project/map data/ethiopia-zone", stringsAsFactors = F)
#changing utm to lat and long
#sputm <- SpatialPoints(randompoints, proj4string = CRS("+proj=utm +zone=37 +ellps=clrk80 +towgs84=-166,-15,204,0,0,0,0"))  #don't need this
et_admin1_map <- spTransform(et_admin1_map.3, CRS("+proj=longlat +datum=WGS84"))
et_admin2_map <- spTransform(et_admin2_map.2, CRS("+proj=longlat + datum=WGS84"))
#plot each map - boundary is the same as admin2
plot(et_admin2_map)
plot(et_admin1_map)
#plot(et_boundary_map)
#if you want to layer
plot(et_admin1_map)
plot(et_admin2_map, add=T)
#starting with those that include HAZ estimates
et_w3_data <- subset(et_w3_data, !is.na(et_w3_data$HAZ))
#keeping only rural respondents
et_w3_data <- subset(et_w3_data, et_w3_data$rural==1)
#creating new region string variable
et_w3_data$region.string <- as.character(et_w3_data$region)
et_w3_data$zone.string <- as.character(et_w3_data$zone)
et_w3_data$region.string[et_w3_data$region.string=="1"] <- "01"
et_w3_data$region.string[et_w3_data$region.string=="2"] <- "02"
et_w3_data$region.string[et_w3_data$region.string=="3"] <- "03"
et_w3_data$region.string[et_w3_data$region.string=="4"] <- "04"
et_w3_data$region.string[et_w3_data$region.string=="5"] <- "05"
et_w3_data$region.string[et_w3_data$region.string=="6"] <- "06"
et_w3_data$region.string[et_w3_data$region.string=="7"] <- "07"
et_w3_data$zone.string[et_w3_data$zone.string=="1"] <- "01"
et_w3_data$zone.string[et_w3_data$zone.string=="2"] <- "02"
et_w3_data$zone.string[et_w3_data$zone.string=="3"] <- "03"
et_w3_data$zone.string[et_w3_data$zone.string=="4"] <- "04"
et_w3_data$zone.string[et_w3_data$zone.string=="5"] <- "05"
et_w3_data$zone.string[et_w3_data$zone.string=="6"] <- "06"
et_w3_data$zone.string[et_w3_data$zone.string=="7"] <- "07"
et_w3_data$zone.string[et_w3_data$zone.string=="8"] <- "08"
et_w3_data$zone.string[et_w3_data$zone.string=="9"] <- "09"
et_w3_data <- within(et_w3_data, zone.st <- paste(region.string, zone.string, sep=""))
#only keeping those with zone codes that exist in the map
et_w3_data_zone <- subset(et_w3_data, zone.st != "0106" | zone.st != "0311" | zone.st != "0415" | zone.st != "0416" | zone.st != "0606" | zone.st != "0714" | zone.st != "0715" | zone.st != "0716" | zone.st != "0722" | zone.st != "1204" | zone.st != "1402" | zone.st != "1403" | zone.st != "1404" | zone.st != "1405" | zone.st != "1406" | zone.st != "1407" | zone.st != "1408" | zone.st != "1409" | zone.st != "1410")
#developing stratas
et_w3_data$strata[et_w3_data$rural==1] <- et_w3_data$region                    #strata is region if rural
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 1] <- 16
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 3] <- 17
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 4] <- 18
et_w3_data$strata[et_w3_data$rural==2 & et_w3_data$region == 7] <- 19
et_w3_data$strata[et_w3_data$rural==2 & (et_w3_data$region == 5 | et_w3_data$region == 6 | et_w3_data$region == 12 | et_w3_data$region == 13 | et_w3_data$region == 15)] <- 20
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 1] <- 21
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 3] <- 22
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 4] <- 23
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 7] <- 24
et_w3_data$strata[et_w3_data$rural==3 & et_w3_data$region == 14] <- 25
et_w3_data$strata[et_w3_data$rural==3 & (et_w3_data$region == 5 | et_w3_data$region == 6 | et_w3_data$region == 12 | et_w3_data$region == 13 | et_w3_data$region == 15)] <- 26
map_desc <- as.data.frame(et_admin1_map)
map_desc.2 <- as.data.frame(et_admin2_map)
nb.r <- poly2nb(et_admin1_map, queen=F, row.names = et_admin1_map$REG_P_CODE)    #couldn't put rownames here - do I need those?
mat <- nb2mat(nb.r, style="B", zero.policy = TRUE)
colnames(mat) <- rownames(mat)
mat <- as.matrix(mat[1:dim(mat)[1], 1:dim(mat)[1]])
mat
nb.r.zone <- poly2nb(et_admin2_map, queen=F, row.names = et_admin2_map$ZON_P_CODE)
mat.2 <- nb2mat(nb.r.zone, style="B", zero.policy=TRUE)
colnames(mat.2) <- rownames(mat.2)
mat.2 <- as.matrix(mat.2[1:dim(mat.2)[1], 1:dim(mat.2)[1]])
mat.2
library(tmaptools)
library(raster)
mapCRS=crs(et_admin1_map) # projection of our map
contriET_geo <- SpatialPointsDataFrame(et_w3_data[,c("longitude", "latitude")], # Lon/LAT
et_w3_data,    #the original data frame
proj4string = mapCRS)   # assign a CRS of map
get_proj4(mapCRS)
library(rmapshaper)
# This will make just a border of the state
base_admin1 <- ms_dissolve(et_admin1_map)
# plot(et_admin1_map,border='black',lwd=1)
#
# # NEW LAYER ON TOP
# plot(contriET_geo,
#      pch=20, #type of character (see link above)
#      col = "red",
#      cex = .6, # shrinking
#      add=T) # VERY important
library(tmap)
creditsText="EPSG: 4326\nProj=longlat\ndatum=WGS84"
tm_shape(base_admin1) + tm_borders("black", lwd=2) + tm_polygons() +
tm_shape(et_admin1_map) + tm_borders("black", lwd=1) +
#ALPHA 0 is total transparency
tm_shape(contriET_geo) + tm_dots(size = 0.1,col = 'red',alpha=0.5) +
tm_layout(main.title = "Ethiopia LSMS Cluster locations",main.title.position = 'center') +
tm_compass(position = c('left','TOP'),type = 'arrow')
#tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2) +
#tm_credits(creditsText, position=c("left", "bottom"))
#getting regional means
library(survey)
design <- svydesign(ids = ~1, weights = ~indiv_wgt,
strata = ~strata, nest=TRUE, cluster= ~ea_id2, data=et_w3_data)
direct <- svyby(~stunted, ~strata + region, design, svymean)
head(direct_region)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "strata", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
#getting regional means
library(survey)
design <- svydesign(ids = ~1, weights = ~indiv_wgt,
strata = ~strata, nest=TRUE, cluster= ~ea_id2, data=et_w3_data)
direct <- svyby(~stunted, ~strata + region, design, svymean)
head(direct_region)
#getting regional means
library(survey)
design <- svydesign(ids = ~1, weights = ~indiv_wgt,
strata = ~strata, nest=TRUE, cluster= ~ea_id2, data=et_w3_data)
direct_region <- svyby(~stunted, ~strata + region, design, svymean)
head(direct_region)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "strata", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
mat
summary(et_admin1_map)
summary(et_w3_data)
names(et_w3_data$region)
summary(et_w3_data$region)
sum(et_w3_data$region)
et_w3_data$region
mat
svysmoothed <- fitGeneric(data=direct_region, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "strata", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
svysmoothed <- fitGeneric(data=et_w3_data, geo=et_admin1_map,
Amat = mat, responseType="binary", responseVar="stunted",
strataVar = "strata", weightVar = "indiv_wgt", regionVar = "region",
clusterVar = "~ea_id2", CI=0.95)
direct_zone <- svyby(~stunted, ~region + zone, design, svymean)
head(direct_zone)
direct_zone
toplot_direct <- svysmoothed$HT
library(mapproj)
layerContrib=merge(et_admin1_map,toplot_direct, by.x='REG_P_CODE', by.y='region',all.x=F)
inla.1 <- inla(stunted ~ f(region, model="iid"),
family = "poisson", E = stunted, data=et_w3_data,
control.predictor=list(compute = TRUE))
inla.1 <- inla(stunted ~ f(region, model="iid"),
family = "poisson", E = et_w3_data$stunted, data=et_w3_data,
control.predictor=list(compute = TRUE))
inla.1$summary.fitted.values
direct_region
inla.1 <- inla(stunted ~ f(region, model="iid"),
family = "poisson", E = direct_region$stunted, data=direct_region,
control.predictor=list(compute = TRUE))
inla.region.1 <- inla(stunted ~ f(region, model="iid"),
family = "poisson", E = direct_region$stunted, data=direct_region,
control.predictor=list(compute = TRUE))
summary(et_w3_geovars)
summaryBy(lat_dd_mod + lon_dd_mod ~ h2015_tot)
install.packages("doBy")
library(doBy)
summaryBy(lat_dd_mod + lon_dd_mod ~ h2015_tot, data=et_w3_geovars, FUN=c(mean))
summary(et_w3_geovars$h2015_tot)
summaryBy(lat_dd_mod + lon_dd_mod ~ h2015_tot, data=et_w3_geovars)
summaryBy(h2015_tot ~ lat_dd_mod + lon_dd_mod, data=et_w3_geovars, FUN=c(mean))

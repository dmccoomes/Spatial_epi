xlim = c(0.3, 1.7), ylim = c(0.3, 1.7),
pch = 1, col="purple")
abline(0,1)
lnprior <- LogNormalPriorCh(1,5,0.5,0.95)
lnprior
plot(seq(0,7,0.1), dlnorm(seq(0,7,0.1),
meanlog=lnprior$mu, sdlog=lnprior$sigma),
type="l", xlab=expression(theta),
ylab="LogNormal Density")
spplot(ohio_map, c("smr"), at = c(0,0.2,0.4,0.6, 0.8, 1, 1.2, 1.4, 1.6), col.regions = rev(brewer.pal(8, "RdBu")))
ohio_map2 <- as.data.frame(ohio_map)
pcprec <- list(theta = list(prior = "pc.prec",
param = c(1, 0.05)))
ohio.fit1 <- inla(Obs ~ 1 + f(fips,
model = "iid", hyper= pcprec), data = ohio_map2,
family="poisson", E = Exp, control.predictor = list(compute=TRUE))
summary(ohio.fit1)
names(ohio.fit1)
expbetaOmed <- ohio.fit1$summary.fixed[4]
sdmed <- 1/sqrt(ohio.fit1$summary.hyperpar[4])
expbetaOmed
sdmed
#creating SMRs
ohio_canc$smr <- ohio_canc$Obs/ohio_canc$Exp
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
rm(list=ls())
library(haven)
#install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%202/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#data
#Obs= observed deaths
#Exp = expected deaths
zip_ohmap_SHP = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%202/Ohio%20shape%20files%20(2).zip"
library(utils)
temp=tempfile()
download.file(zip_ohmap_SHP, temp)
unzip(temp)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
#ohMap <- readOGR("ohio_map.shp",stringsAsFactors=F)
#The above code doesn't seem to work - loading data manually.
#On pc
#ohio_map <- readOGR(dsn="/Users/david/Desktop/Dave/school/Spatial Epi/HW 2/HW 2_data", layer = "ohio_map")
#on pc in office
ohio_map <- readOGR(dsn="\\My Documents\\GitHub\\Spatial_epi\\HW 2\\Ohio shape files", layer="ohio_map")
#on laptop
#ohio_map <- readOGR(dsn="C:/Users/dcoomes/Documents/GitHub/Spatial_epi/HW 2/Ohio shape files", layer="ohio_map")
#creating SMRs
ohio_canc$smr <- ohio_canc$Obs/ohio_canc$Exp
View(oh_map)
View(ohio_map)
ohio_map
ohio_map$CNTYIDFP00
knitr::opts_chunk$set(echo = TRUE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(haven)) install.packages("haven")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
#Cancer data
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_data_ascending_fips.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#Map data
zip_oh_map <- "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Map%20data.zip"
#library(utils)
temp=tempfile()
download.file(zip_oh_map, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
#ohmap <- readOGR(url(zip_oh_map),stringsAsFactors=F)
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Data\\Map data", #layer="ohio_map")
#When using PC in office
ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Desktop\\Epi PhD\\Classes\\Spatial epi\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
summary(ohmap)
ohmap$COUNTYFP00
summary(ohio_canc)
ohio_canc$fips
View(ohio_canc)
nb.map <- poly2nb(ohmap)
nb2INLA("oh_graph", nb.map)
summary(ohmap)
ohmap$COUNTYFP00
summary(ohmap)
ohmap$CNTYIDFP00
ohio_canc$fips
#need to merge map and cancer data together
ohmap$fips <- as.numeric(as.character(ohio_map$CNTYIDFP00))
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap <- ohmap[order(fips),]
ohmap <- ohmap[order(ohmap$fips),]
ohio_canc <- ohio_canc[order(ohio_canc$fips),]
ohio_map <- merge(ohmap,ohio_canc,by="fips")
ohio_map$fips <- as.numeric(as.character(ohio_map$CNTYIDFP00))
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
rm(list=ls())
library(haven)
#install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%202/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#data
#Obs= observed deaths
#Exp = expected deaths
zip_ohmap_SHP = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%202/Ohio%20shape%20files%20(2).zip"
library(utils)
temp=tempfile()
download.file(zip_ohmap_SHP, temp)
unzip(temp)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
#ohMap <- readOGR("ohio_map.shp",stringsAsFactors=F)
#The above code doesn't seem to work - loading data manually.
#On pc
#ohio_map <- readOGR(dsn="/Users/david/Desktop/Dave/school/Spatial Epi/HW 2/HW 2_data", layer = "ohio_map")
#on pc in office
ohio_map <- readOGR(dsn="\\My Documents\\GitHub\\Spatial_epi\\HW 2\\Ohio shape files", layer="ohio_map")
#on laptop
#ohio_map <- readOGR(dsn="C:/Users/dcoomes/Documents/GitHub/Spatial_epi/HW 2/Ohio shape files", layer="ohio_map")
#creating SMRs
ohio_canc$smr <- ohio_canc$Obs/ohio_canc$Exp
ohio_map$fips <- as.numeric(as.character(ohio_map$CNTYIDFP00))
ohio_map <- ohio_map[order(ohio_map$fips),]
ohio_map <- merge(ohio_map,ohio_canc,by="fips")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
rm(list=ls())
library(haven)
#install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%202/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#data
#Obs= observed deaths
#Exp = expected deaths
zip_ohmap_SHP = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%202/Ohio%20shape%20files%20(2).zip"
library(utils)
temp=tempfile()
download.file(zip_ohmap_SHP, temp)
unzip(temp)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
#ohMap <- readOGR("ohio_map.shp",stringsAsFactors=F)
#The above code doesn't seem to work - loading data manually.
#On pc
#ohio_map <- readOGR(dsn="/Users/david/Desktop/Dave/school/Spatial Epi/HW 2/HW 2_data", layer = "ohio_map")
#on pc in office
ohio_map <- readOGR(dsn="\\My Documents\\GitHub\\Spatial_epi\\HW 2\\Ohio shape files", layer="ohio_map")
#on laptop
#ohio_map <- readOGR(dsn="C:/Users/dcoomes/Documents/GitHub/Spatial_epi/HW 2/Ohio shape files", layer="ohio_map")
#creating SMRs
ohio_canc$smr <- ohio_canc$Obs/ohio_canc$Exp
ohio_map$fips <- as.numeric(as.character(ohio_map$CNTYIDFP00))
ohio_map <- ohio_map[order(ohio_map$fips),]
ohio_map <- merge(ohio_map,ohio_canc,by="fips")
#set breakpoints for plotting
num_bins <- 8
quants <- round(quantile(ohio_map@data$Obs, seq(0,1,length.out=num_bins)),2)
ohio_map@data$obs_cut <- cut(ohio_map@data$Obs, breaks=c(quants, Inf), include.lowest=TRUE, right=FALSE)
ohio_df <- tidy(ohio_map)
ohio_map$polyID <- sapply(slot(ohio_map, "polygons"), function(x) slot(x, "ID"))
ohio_df <- merge(ohio_df, ohio_map, by.x="id", by.y="polyID")
observed_ct_map <- ggplot() +
geom_polygon(
data=ohio_df,
aes(x=long, y=lat, group=group,
fill = obs_cut)) +
scale_fill_brewer("Observed deaths", palette="RdBu", direction=-1) +
theme(line=element_blank(),
axis.text=element_blank(),
axis.title=element_blank()) +
coord_equal()
#save the map
ggsave("ohio_map_obs_ggplot.pdf", width=8, height=8)
plot(observed_ct_map,
border='blue',
lwd=1)
#set breakpoints for plotting
num_bins <- 8
quants <- round(quantile(ohio_map@data$Exp, seq(0,1,length.out=num_bins)),2)
ohio_map@data$exp_cut <- cut(ohio_map@data$Exp, breaks=c(quants, Inf), include.lowest=TRUE, right=FALSE)
ohio_df <- tidy(ohio_map)
ohio_map$polyID <- sapply(slot(ohio_map, "polygons"), function(x) slot(x, "ID"))
ohio_df <- merge(ohio_df, ohio_map, by.x="id", by.y="polyID")
expected_ct_map <- ggplot() +
geom_polygon(
data=ohio_df,
aes(x=long, y=lat, group=group,
fill = exp_cut)) +
scale_fill_brewer("Expected deaths", palette="RdBu", direction=-1) +
theme(line=element_blank(),
axis.text=element_blank(),
axis.title=element_blank()) +
coord_equal()
#save the map
ggsave("ohio_map_exp_ggplot.pdf", width=8, height=8)
plot(expected_ct_map)
#set breakpoints for plotting
num_bins <- 8
quants <- round(quantile(ohio_map@data$smr, seq(0,1,length.out=num_bins)),2)
ohio_map@data$smr_cut <- cut(ohio_map@data$smr, breaks=c(quants, Inf), include.lowest=TRUE, right=FALSE)
ohio_df <- tidy(ohio_map)
ohio_map$polyID <- sapply(slot(ohio_map, "polygons"), function(x) slot(x, "ID"))
ohio_df <- merge(ohio_df, ohio_map, by.x="id", by.y="polyID")
smr_ct_map <- ggplot() +
geom_polygon(
data=ohio_df,
aes(x=long, y=lat, group=group,
fill = smr_cut)) +
scale_fill_brewer("SMR", palette="RdBu", direction=-1) +
theme(line=element_blank(),
axis.text=element_blank(),
axis.title=element_blank()) +
coord_equal()
#save the map
ggsave("ohio_map_smr_ggplot.pdf", width=8, height=8)
plot(smr_ct_map,
border='blue',
lwd=1)
summary(ohio_map$smr)
hist(ohio_map$smr, breaks=10)
ebresults <- eBayes(ohio_map$Obs, ohio_map$Exp)
ebresults$alpha
#alpha = 51.73209
exp(ebresults$beta)
#beta = 0.9749581
mean(ohio_map$Obs/ohio_map$Exp)
#mean is 0.9432857
summary(ebresults$RR)
hist(ebresults$RR, breaks=10)
par(mar = c(1,1,1,1))
mapvariable(ebresults$RR, ohio_map)
par(mfrow = c(2,2))
EBpostdens(ohio_map$Obs[1], ohio_map$Exp[1], ebresults$alpha, ebresults$beta,
lower = 0, upper = 3, main = "County 1")
EBpostdens(ohio_map$Obs[2], ohio_map$Exp[2], ebresults$alpha, ebresults$beta,
lower = 0, upper = 3, main = "County 2")
EBpostdens(ohio_map$Obs[3], ohio_map$Exp[3], ebresults$alpha, ebresults$beta,
lower = 0, upper = 3, main = "County 3")
EBpostdens(ohio_map$Obs[4], ohio_map$Exp[4], ebresults$alpha, ebresults$beta,
lower = 0, upper = 3, main = "County 4")
egamma <- qgamma(seq(0.5, length(ohio_map$Obs), 1)/length(ohio_map$Obs),
ebresults$alpha, ebresults$alpha)
par(mfrow = c(1,2))
#first plot SMR estimates
plot(egamma, exp(-ebresults$beta) * sort(ohio_map$smr), xlim = c(0.4, 1.6), ylim = c(0.4, 1.6), xlab = "Exp Order Stat", ylab = "Obs Order Stat")
abline(0,1)
#second plot is estimates from gamma model
plot(egamma, exp(-ebresults$beta) * sort(ebresults$RR),
xlim = c(0.4, 1.6), ylim = c(0.4, 1.6), xlab="Exp Order Stat",
ylab = "Obs Order Stat (Gamma)")
abline(0,1)
#par(mfrow = c(2,1))
plot(ohio_map$smr, ebresults$RR, xlab="SMR", ylab="EB estimates",
xlim = c(0.3, 1.7), ylim = c(0.3, 1.7),
pch = 1, col="purple")
abline(0,1)
plot(log(ohio_map$smr), log(ebresults$RR),
xlim= c(-1.5, 1.5), ylim = c(-1, 1),
xlab="log(SMR)", ylab="log(EB estimate)",
pch = 1, col="purple")
abline(0,1)
par(mfrow = c(1,1), mar=c(1,1,1,1))
thresh_1.2 <- EBpostthresh(ohio_map$Obs, ohio_map$Exp, alpha = ebresults$alpha,
beta = ebresults$beta, rrthresh=1.2)
mapvariable(thresh_1.2, ohio_map)
lnprior <- LogNormalPriorCh(1,5,0.5,0.95)
lnprior
plot(seq(0,7,0.1), dlnorm(seq(0,7,0.1),
meanlog=lnprior$mu, sdlog=lnprior$sigma),
type="l", xlab=expression(theta),
ylab="LogNormal Density")
spplot(ohio_map, c("smr"), at = c(0,0.2,0.4,0.6, 0.8, 1, 1.2, 1.4, 1.6), col.regions = rev(brewer.pal(8, "RdBu")))
ohio_map2 <- as.data.frame(ohio_map)
pcprec <- list(theta = list(prior = "pc.prec",
param = c(1, 0.05)))
ohio.fit1 <- inla(Obs ~ 1 + f(fips,
model = "iid", hyper= pcprec), data = ohio_map2,
family="poisson", E = Exp, control.predictor = list(compute=TRUE))
summary(ohio.fit1)
names(ohio.fit1)
expbetaOmed <- ohio.fit1$summary.fixed[4]
sdmed <- 1/sqrt(ohio.fit1$summary.hyperpar[4])
expbetaOmed
sdmed
#summary(ohio.fit1)
ohio.fit1$summary.fixed
lnorminter <- ohio.fit1$summary.fixed[4]
lnormREs <- exp(ohio.fit1$summary.random$fips[5])
lnormRRs <- as.double(exp(lnorminter)) * lnormREs[,1]
ohio_map$RRlnorm <- lnormRRs
spplot(ohio_map, c("RRlnorm"), col.regions=colorRampPalette(rev(brewer.pal(8, "RdBu")))(50))
par(mfrow = c(1,1))
plot(ohio_map$RRlnorm, ohio_map$smr, xlab="SMR", ylab="Lognormal estimates",
xlim = c(0,2), ylim = c(0,2),
pch=1, col="purple")
abline(0,1)
plot(ohio_map$RRlnorm, ebresults$RR, xlab="SMR", ylab="EB estimates",
xlim = c(0.3, 1.7), ylim = c(0.3, 1.7),
pch = 1, col="purple")
abline(0,1)
knitr::opts_chunk$set(echo = TRUE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(haven)) install.packages("haven")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
#Cancer data
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_data_ascending_fips.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#Map data
zip_oh_map <- "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Map%20data.zip"
#library(utils)
temp=tempfile()
download.file(zip_oh_map, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
#ohmap <- readOGR(url(zip_oh_map),stringsAsFactors=F)
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Data\\Map data", #layer="ohio_map")
#When using PC in office
ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Desktop\\Epi PhD\\Classes\\Spatial epi\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
summary(ohmap)
ohmap$CNTYIDFP00
summary(ohio_canc)
ohio_canc$fips
View(ohio_canc)
nb.map <- poly2nb(ohmap)
nb2INLA("oh_graph", nb.map)
ohio_canc2 <- as.data.frame(ohio_canc)
#need to merge map and cancer data together
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap <- ohmap[order(ohmap$fips),]
ohio_map <- merge(ohmap,ohio_canc,by="fips")
knitr::opts_chunk$set(echo = TRUE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(haven)) install.packages("haven")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
#Cancer data
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_data_ascending_fips.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#Map data
zip_oh_map <- "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Map%20data.zip"
#library(utils)
temp=tempfile()
download.file(zip_oh_map, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
#ohmap <- readOGR(url(zip_oh_map),stringsAsFactors=F)
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Data\\Map data", #layer="ohio_map")
#When using PC in office
ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Desktop\\Epi PhD\\Classes\\Spatial epi\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
summary(ohmap)
ohmap$CNTYIDFP00
#summary(ohio_canc)
#ohio_canc$fips
#View(ohio_canc)
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap <- ohmap[order(ohmap$fips),]
ohio_map <- merge(ohmap,ohio_canc,by="fips")
ohmap <- merge(ohmap,ohio_canc,by="fips")
ohio_canc2 <- as.data.frame(ohio_canc)
#need to merge map and cancer data together
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap <- ohmap[order(ohmap$fips),]
ohmap <- merge(ohmap,ohio_canc,by="fips")
ohio_map$fips <- as.numeric(as.character(ohio_map$CNTYIDFP00))

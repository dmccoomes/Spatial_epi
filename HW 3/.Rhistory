col.W <- nb2listw(nb.map, style="W",zero.policy=TRUE)
col.B <- nb2listw(nb.map, style="B",zero.policy=TRUE)
# kappaval <- function(Obs, fitted, df) {
#   sum((Obs - fitted)^2/fitted)/df
# }
#fitting poisson model
quasip_mod <- glm(data=ohio_canc, Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
moran.test(sidsres, col.W)
kappaest <- kappaval(ohio_canc$Obs, mod$fitted, mod$df.resid)
col.W <- nb2listw(nb.map, style="W",zero.policy=TRUE)
col.B <- nb2listw(nb.map, style="B",zero.policy=TRUE)
# kappaval <- function(Obs, fitted, df) {
#   sum((Obs - fitted)^2/fitted)/df
# }
#fitting poisson model
quasip_mod <- glm(data=ohio_canc, Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
moran.test(sidsres, col.W)
# kappaest <- kappaval(ohio_canc$Obs, mod$fitted, mod$df.resid)
# nMC <- 1000
# ncts <- length(ohio_canc$Exp)
# yMC <- matrix(rpois(n=nMC * ncts, lambda=ohio_canc$Exp),
#               nrow=ncts, ncol=nMC)
# kappaMC <- NULL
# for (i in 1:nMC){
#  modMC <- glm(yMC[,i]~1,offset=log(ohio_canc$Exp),family="quasipoisson")
#  kappaMC[i] <- kappaval(yMC[,i],modMC$fitted,modMC$df.resid)
# }
summary(ohmap)
summary(ohio_canc)
geary.test(sidsres2,col.W)
geary.test(sidsres,col.W)
geary.test(sidsres,col.W)
plot(ca20)
data("ca20")
data("ca20")
plot(ca20)
library(geoR)
if (!require(geoR)) install.packages("geoR")
library(geoR)
data("ca20")
plot(ca20)
cloudca <- variog(ca20, option="cloud")
#add in latitude and longitude to run geary test
ohio_canc <- merge(ohio_canc, ohmap, by="fips")
#add in latitude and longitude to run geary test
ohio_canc <- merge(ohio_canc, ohmap, by="Region")
#add in latitude and longitude to run geary test
ohio_canc <- merge(ohio_canc, ohmap, by=fips)
summary$ohio_canc
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap,ohio_canc,by="fips")
geary.test(sidsres,col.W)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohcanc <- merge(ohio_canc, ohmap, by="fips")
geary.test(sidsres,col.W)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc <- merge(ohio_canc, ohmap, by="fips")
geary.test(sidsres,col.W)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, cache=TRUE, message=FALSE)
if (!require(spdep)) install.packages("spdep", repos = "http://cran.us.r-project.org")
if (!require(raster)) install.packages("raster", repos = "http://cran.us.r-project.org")
if (!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
rm(list=ls())
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(SUMMER)
knitr::opts_chunk$set(echo = FALSE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(haven)) install.packages("haven")
if (!require(rgeos)) install.packages("rgeos")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(SUMMER)) install.packages("SUMMER")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
library(rgeos)
#Cancer data
#using github
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#pc in office
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\HW 3\\Data\\Map data", layer="ohio_map")
#laptop
ohmap <- readOGR(dsn="/Users/david/Documents/GitHub/Spatial_epi/HW 3/Map data", layer="ohio_map")
#computer in library
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
#summary(ohmap)
#ohmap$COUNTYFP00
#creating neighbor file
nb.map <- poly2nb(ohmap)
set.seed(03022020)
col.W <- nb2listw(nb.map, style="W",zero.policy=TRUE)
col.B <- nb2listw(nb.map, style="B",zero.policy=TRUE)
# kappaval <- function(Obs, fitted, df) {
#   sum((Obs - fitted)^2/fitted)/df
# }
#fitting poisson model
quasip_mod <- glm(data=ohio_canc, Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
moran.test(sidsres, col.W)
# kappaest <- kappaval(ohio_canc$Obs, mod$fitted, mod$df.resid)
# nMC <- 1000
# ncts <- length(ohio_canc$Exp)
# yMC <- matrix(rpois(n=nMC * ncts, lambda=ohio_canc$Exp),
#               nrow=ncts, ncol=nMC)
# kappaMC <- NULL
# for (i in 1:nMC){
#  modMC <- glm(yMC[,i]~1,offset=log(ohio_canc$Exp),family="quasipoisson")
#  kappaMC[i] <- kappaval(yMC[,i],modMC$fitted,modMC$df.resid)
# }
hist(kappaMC, xlim=c(min(kappaMC),
max(kappaMC, kappaest)), main="",
xlab = expression(kappa))
summary(ohio)
summary(ohio_canc)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap, ohio_canc, by="fips")
geary.test(sidsres,col.W)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap, ohio_canc, by="fips")
#fitting poisson model
quasip_mod <- glm(data=ohmap, Obs ~ 1, offset=log(Exp), family=quasipoisson())
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap, ohio_canc, by="fips")
#fitting poisson model
quasip_mod <- glm(data=ohmap, ohmap$Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
geary.test(sidsres,col.W)
summary(ohmap)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap, ohio_canc, by="fips")
#fitting poisson model
quasip_mod <- glm(data=ohmap, ohmap$Obs ~ INTPTLAT00 + INTPTLON00, offset=log(Exp), family=quasipoisson())
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap, ohio_canc, by="fips")
#fitting poisson model
quasip_mod <- glm(data=ohmap, ohmap$Obs ~ INTPTLAT00 + INTPTLON00, offset=log(ohmap$Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
geary.test(sidsres,col.W)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap, ohio_canc, by="fips")
#fitting poisson model
quasip_mod <- glm(data=ohmap, Obs ~ INTPTLAT00 + INTPTLON00, offset=log(Exp), family=quasipoisson())
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohmap <- merge(ohmap, ohio_canc, by="fips")
#fitting poisson model
quasip_mod <- glm(data=ohio_canc, Obs ~ INTPTLAT00 + INTPTLON00, offset=log(Exp), family=quasipoisson())
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc <- merge(ohio_canc, ohmap, by="fips")
#fitting poisson model
quasip_mod <- glm(data=ohio_canc, Obs ~ INTPTLAT00 + INTPTLON00, offset=log(Exp), family=quasipoisson())
summary(ohio_canc)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc <- merge(ohio_canc, ohmap, by.x="fips", by.y="fips")
#fitting poisson model
quasip_mod <- glm(data=ohio_canc, Obs ~ INTPTLAT00 + INTPTLON00, offset=log(Exp), family=quasipoisson())
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, cache=TRUE, message=FALSE)
if (!require(spdep)) install.packages("spdep", repos = "http://cran.us.r-project.org")
if (!require(raster)) install.packages("raster", repos = "http://cran.us.r-project.org")
if (!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
rm(list=ls())
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(SUMMER)
knitr::opts_chunk$set(echo = FALSE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(haven)) install.packages("haven")
if (!require(rgeos)) install.packages("rgeos")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(SUMMER)) install.packages("SUMMER")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
library(rgeos)
#Cancer data
#using github
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#pc in office
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\HW 3\\Data\\Map data", layer="ohio_map")
#laptop
ohmap <- readOGR(dsn="/Users/david/Documents/GitHub/Spatial_epi/HW 3/Map data", layer="ohio_map")
#computer in library
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
#summary(ohmap)
#ohmap$COUNTYFP00
#creating neighbor file
nb.map <- poly2nb(ohmap)
set.seed(03022020)
col.W <- nb2listw(nb.map, style="W",zero.policy=TRUE)
col.B <- nb2listw(nb.map, style="B",zero.policy=TRUE)
# kappaval <- function(Obs, fitted, df) {
#   sum((Obs - fitted)^2/fitted)/df
# }
#fitting poisson model
quasip_mod <- glm(data=ohio_canc, Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
moran.test(sidsres, col.W)
# kappaest <- kappaval(ohio_canc$Obs, mod$fitted, mod$df.resid)
# nMC <- 1000
# ncts <- length(ohio_canc$Exp)
# yMC <- matrix(rpois(n=nMC * ncts, lambda=ohio_canc$Exp),
#               nrow=ncts, ncol=nMC)
# kappaMC <- NULL
# for (i in 1:nMC){
#  modMC <- glm(yMC[,i]~1,offset=log(ohio_canc$Exp),family="quasipoisson")
#  kappaMC[i] <- kappaval(yMC[,i],modMC$fitted,modMC$df.resid)
# }
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc2 <- merge(ohio_canc, ohmap, by.x="fips", by.y="fips")
#fitting poisson model
quasip_mod <- glm(data=ohio_canc2, Obs ~ INTPTLAT00 + INTPTLON00, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
geary.test(sidsres,col.W)
library(SpatialEpi)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(geo, cases, population, expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(geo, Obs, population, expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(geo, ohio_canc$Obs, population, expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(geo, ohio_canc$Obs, n, expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(geo, ohio_canc$Obs, population=ohio$canc$n, expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(geo, ohio_canc$Obs, population=ohio_canc$n, expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
summary(ohio_canc)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(geo, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(ohio_canc2, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(ohio_canc2$fips, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(Region, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(ohio_canc$Region, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(ohio_canc$fips, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
Kpoisson <- kulldorff(ohmap$fips, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
geo <- latlong2grid(coordinates(ohmap))
Kpoisson <- kulldorff(geo, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
summary(ohio_map)
summary(ohio_canc)
summary(ohio_canc2)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
getLabelPoint <- function(fips) {
Polygon(fips[c("INTPTLON00", "INTPTLAT00")])@labpt
}
Kpoisson <- kulldorff(geo, ohio_canc2$Obs, population=ohio_canc2$N,
expected.cases=NULL,
pop.upper.bound, n.simulations, alpha.level, plot=T)
library(SpatialEpi)
pop.upper.bound <- 20
n.simulations <- 1000
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
getLabelPoint <- function(fips) {
Polygon(fips[c("INTPTLON00", "INTPTLAT00")])@labpt
}
centOH <- by(ohmap, ohmap$fips, getLabelPoint)
centOH <- by(ohmap, ohmap$fips, getLabelPoint)
centOH <- by(ohio_canc2, ohio_canc2$fips, getLabelPoint)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc2 <- merge(ohio_canc, ohmap, by.x="fips", by.y="fips")
ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$INTPTLAT00))
#fitting poisson model
quasip_mod <- glm(data=ohio_canc2, Obs ~ INTPTLAT00 + INTPTLON00, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
geary.test(sidsres,col.W)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc2 <- merge(ohio_canc, ohmap, by.x="fips", by.y="fips")
ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$INTPTLAT00))
ohio_canc2$lon <- as.character(as.numeric(ohio_canc2$INTPTLON00))
#fitting poisson model
quasip_mod <- glm(data=ohio_canc2, Obs ~ lat + lon, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
geary.test(sidsres,col.W)
summary(ohio_canc2)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc2 <- merge(ohio_canc, ohmap, by.x="fips", by.y="fips")
ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$INTPTLAT00))
ohio_canc2$lon <- as.character(as.numeric(ohio_canc2$INTPTLON00))
#fitting poisson model
quasip_mod <- glm(data=ohio_canc2, Obs ~ lat + lon, offset=log(Exp),
family=quasipoisson())
sidsres2 <- residuals(quasip_mod, type="pearson")
geary.test(sidsres2,col.W)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap <- ohmap[order(ohmap$fips),]            #ordering fips so that counties align in data sets
ohio_canc2 <- merge(ohio_canc, ohmap, by.x="fips", by.y="fips")
ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$INTPTLAT00))
ohio_canc2$lon <- as.character(as.numeric(ohio_canc2$INTPTLON00))
#fitting poisson model
quasip_mod <- glm(data=ohio_canc2, Obs ~ lat + lon, offset=log(Exp),
family=quasipoisson())
sidsres2 <- residuals(quasip_mod, type="pearson")
geary.test(sidsres2,col.W)
#add in latitude and longitude to run geary test
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
#ordering fips so that counties align in data sets:
#ohmap <- ohmap[order(ohmap$fips),]
ohio_canc2 <- merge(ohio_canc, ohmap, by.x="fips", by.y="fips")
ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$INTPTLAT00))
ohio_canc2$lon <- as.character(as.numeric(ohio_canc2$INTPTLON00))
#fitting poisson model
quasip_mod2 <- glm(data=ohio_canc2, Obs ~ lat + lon, offset=log(Exp),
family=quasipoisson())
sidsres2 <- residuals(quasip_mod2, type="pearson")
geary.test(sidsres2,col.W)

if (!require(haven)) install.packages("haven")
if (!require(rgeos)) install.packages("rgeos")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(SUMMER)) install.packages("SUMMER")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
library(rgeos)
#Cancer data
#using github
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#pc in office
ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\HW 3\\Data\\Map data", layer="ohio_map")
#laptop
#ohmap <- readOGR(dsn="/Users/david/Documents/GitHub/Spatial_epi/HW 3/Map data", layer="ohio_map")
#computer in library
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
#summary(ohmap)
#ohmap$COUNTYFP00
#creating neighbor file
nb.map <- poly2nb(ohmap)
set.seed(03022020)
col.W <- nb2listw(nb.map, style="W",zero.policy=TRUE)
col.B <- nb2listw(nb.map, style="B",zero.policy=TRUE)
#Merging map and cancer data together to include lat and lon in cancer data
ohio_canc2 <- ohio_canc
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap$lat <- ohmap$INTPTLAT00
ohmap$lon <- ohmap$INTPTLON00
ohio_canc2 <- merge(ohio_canc2, ohmap[, c("fips", "lat", "lon")], by.x="fips", by.y="fips")
#ohio_canc2 <- merge(ohio_canc2, ohmap, by="fips")
#ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$lat))
#ohio_canc2$lon <- as.character(as.numeric(ohio_canc2$lon))
ohio_canc2$lat <- as.numeric(as.character(ohio_canc2$lat))
ohio_canc2$lon <- as.numeric(as.character(ohio_canc2$lon))
# kappaval <- function(Obs, fitted, df) {
#   sum((Obs - fitted)^2/fitted)/df
# }
#fitting poisson model without covariates
quasip_mod <- glm(data=ohio_canc, Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
moran.test(sidsres, col.W)
#running Moran test using B weight option
moran.test(sidsres, col.B)
#fitting poisson model with covariates
quasip_mod.1 <- glm(data=ohio_canc2, Obs ~ lat + lon, offset=log(Exp), family=quasipoisson())
summary(quasip_mod.1)         #latitude is higly significant (p=0.0018), lon is not (p=0.132)
sidsres.1 <- residuals(quasip_mod.1, type="pearson")
moran.test(sidsres.1, col.W)
moran.test(sidsres.1, col.B)
# kappaest <- kappaval(ohio_canc$Obs, mod$fitted, mod$df.resid)
# nMC <- 1000
# ncts <- length(ohio_canc$Exp)
# yMC <- matrix(rpois(n=nMC * ncts, lambda=ohio_canc$Exp),
#               nrow=ncts, ncol=nMC)
# kappaMC <- NULL
# for (i in 1:nMC){
#  modMC <- glm(yMC[,i]~1,offset=log(ohio_canc$Exp),family="quasipoisson")
#  kappaMC[i] <- kappaval(yMC[,i],modMC$fitted,modMC$df.resid)
# }
#Geary test on non-adjusted data
geary.test(sidsres,col.W)
geary.test(sidsres, col.B)
#Geary test on adjusted data
geary.test(sidsres.1, col.W)
geary.test(sidsres.1, col.B)
conflicts()
df <- maps::region("ohio")
df <- maps_data(maps::region("ohio"))
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, cache=TRUE, message=FALSE)
if (!require(spdep)) install.packages("spdep", repos = "http://cran.us.r-project.org")
if (!require(raster)) install.packages("raster", repos = "http://cran.us.r-project.org")
if (!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
rm(list=ls())
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(SUMMER)
knitr::opts_chunk$set(echo = FALSE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(haven)) install.packages("haven")
if (!require(rgeos)) install.packages("rgeos")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(SUMMER)) install.packages("SUMMER")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
library(rgeos)
#Cancer data
#using github
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#pc in office
ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\HW 3\\Data\\Map data", layer="ohio_map")
#laptop
#ohmap <- readOGR(dsn="/Users/david/Documents/GitHub/Spatial_epi/HW 3/Map data", layer="ohio_map")
#computer in library
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
#summary(ohmap)
#ohmap$COUNTYFP00
#creating neighbor file
nb.map <- poly2nb(ohmap)
set.seed(03022020)
col.W <- nb2listw(nb.map, style="W",zero.policy=TRUE)
col.B <- nb2listw(nb.map, style="B",zero.policy=TRUE)
#Merging map and cancer data together to include lat and lon in cancer data
ohio_canc2 <- ohio_canc
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap$lat <- ohmap$INTPTLAT00
ohmap$lon <- ohmap$INTPTLON00
ohio_canc2 <- merge(ohio_canc2, ohmap[, c("fips", "lat", "lon")], by.x="fips", by.y="fips")
#ohio_canc2 <- merge(ohio_canc2, ohmap, by="fips")
#ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$lat))
#ohio_canc2$lon <- as.character(as.numeric(ohio_canc2$lon))
ohio_canc2$lat <- as.numeric(as.character(ohio_canc2$lat))
ohio_canc2$lon <- as.numeric(as.character(ohio_canc2$lon))
# kappaval <- function(Obs, fitted, df) {
#   sum((Obs - fitted)^2/fitted)/df
# }
#fitting poisson model without covariates
quasip_mod <- glm(data=ohio_canc, Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
moran.test(sidsres, col.W)
#running Moran test using B weight option
moran.test(sidsres, col.B)
#fitting poisson model with covariates
quasip_mod.1 <- glm(data=ohio_canc2, Obs ~ lat + lon, offset=log(Exp), family=quasipoisson())
summary(quasip_mod.1)         #latitude is higly significant (p=0.0018), lon is not (p=0.132)
sidsres.1 <- residuals(quasip_mod.1, type="pearson")
moran.test(sidsres.1, col.W)
moran.test(sidsres.1, col.B)
# kappaest <- kappaval(ohio_canc$Obs, mod$fitted, mod$df.resid)
# nMC <- 1000
# ncts <- length(ohio_canc$Exp)
# yMC <- matrix(rpois(n=nMC * ncts, lambda=ohio_canc$Exp),
#               nrow=ncts, ncol=nMC)
# kappaMC <- NULL
# for (i in 1:nMC){
#  modMC <- glm(yMC[,i]~1,offset=log(ohio_canc$Exp),family="quasipoisson")
#  kappaMC[i] <- kappaval(yMC[,i],modMC$fitted,modMC$df.resid)
# }
#Geary test on non-adjusted data
geary.test(sidsres,col.W)
geary.test(sidsres, col.B)
#Geary test on adjusted data
geary.test(sidsres.1, col.W)
geary.test(sidsres.1, col.B)
df <- map_data(maps::region("ohio"))
df <- map_data(region("ohio"))
df <- map_data(region="ohio")
df <- map_data(maps::county, region="ohio")
df <- map_data(county, region="ohio")
df <- map_data(county(region="ohio")
df <- map_data(county(region="ohio")
oh_df <- as.data.frame(ohmap)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
#first,  form a matrix containing the centroids
getLabelPoint <- function(fips) {
Polygon(fips[c("INTPTLON00", "INTPTLAT00")])@labpt
}
oh_df <- as.data.frame(ohmap)
oh_df$fips <- as.numeric(oh_df$fips)
centOH <- by(oh_df, oh_df$fips, getLabelPoint)
summary(oh_df)
nc.sids <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
df <- map_data("county", "north carolina")
df <- map_data("county", "ohio")
summary(df)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, cache=TRUE, message=FALSE)
if (!require(spdep)) install.packages("spdep", repos = "http://cran.us.r-project.org")
if (!require(raster)) install.packages("raster", repos = "http://cran.us.r-project.org")
if (!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
rm(list=ls())
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(SUMMER)
knitr::opts_chunk$set(echo = FALSE)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos = c(getOption("repos"),
INLA = "https://inla.r-inla-download.org/R/stable"),
dep=TRUE)
}
if (!require(SUMMER)) install.packages("SUMMER", repos = "http://cran.us.r-project.org")
if (!require(foreign)) install.packages("foreign", repos = "http://cran.us.r-project.org")
if (!require(haven)) install.packages("haven")
if (!require(rgeos)) install.packages("rgeos")
if (!require(rgdal)) install.packages("rgdal")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(SpatialEpi)) install.packages("SpatialEpi")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(maps)) install.packages("maps")
if (!require(broom)) install.packages("broom")
if (!require(raster)) install.packages("raster")
if (!require(leaflet)) install.packages("leaflet")
if (!require(dplyr)) install.packages("dplyr")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(SUMMER)) install.packages("SUMMER")
rm(list=ls())
library(foreign)
library(haven)
library(INLA)
library(rgdal)
library(maptools)
library(sp)
library(spdep)
library(SpatialEpi)
library(RColorBrewer)
library(ggplot2)
library(maps)
library(broom)
library(raster)
library(leaflet)
library(dplyr)
library(tidyverse)
library(SUMMER)
library(rgeos)
#Cancer data
#using github
link = "https://github.com/dmccoomes/Spatial_epi/raw/master/HW%203/Data/ohio_2019_version.txt"
ohio_canc <- read.table(url(link), header=TRUE)
#pc in office
ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Dropbox\\Classes\\Spatial modeling\\HW 3\\Data\\Map data", layer="ohio_map")
#laptop
#ohmap <- readOGR(dsn="/Users/david/Documents/GitHub/Spatial_epi/HW 3/Map data", layer="ohio_map")
#computer in library
#ohmap <- readOGR(dsn="C:\\Users\\dcoomes\\Documents\\GitHub\\Spatial_epi\\HW 3\\Map data", layer="ohio_map")
#ordering of regions is not the same among the data sets - how do we align these two?
#summary(ohmap)
#ohmap$COUNTYFP00
#creating neighbor file
nb.map <- poly2nb(ohmap)
set.seed(03022020)
col.W <- nb2listw(nb.map, style="W",zero.policy=TRUE)
col.B <- nb2listw(nb.map, style="B",zero.policy=TRUE)
#Merging map and cancer data together to include lat and lon in cancer data
ohio_canc2 <- ohio_canc
ohmap$fips <- as.numeric(as.character(ohmap$CNTYIDFP00))
ohmap$lat <- ohmap$INTPTLAT00
ohmap$lon <- ohmap$INTPTLON00
ohio_canc2 <- merge(ohio_canc2, ohmap[, c("fips", "lat", "lon")], by.x="fips", by.y="fips")
#ohio_canc2 <- merge(ohio_canc2, ohmap, by="fips")
#ohio_canc2$lat <- as.character(as.numeric(ohio_canc2$lat))
#ohio_canc2$lon <- as.character(as.numeric(ohio_canc2$lon))
ohio_canc2$lat <- as.numeric(as.character(ohio_canc2$lat))
ohio_canc2$lon <- as.numeric(as.character(ohio_canc2$lon))
# kappaval <- function(Obs, fitted, df) {
#   sum((Obs - fitted)^2/fitted)/df
# }
#fitting poisson model without covariates
quasip_mod <- glm(data=ohio_canc, Obs ~ 1, offset=log(Exp), family=quasipoisson())
sidsres <- residuals(quasip_mod, type="pearson")
moran.test(sidsres, col.W)
#running Moran test using B weight option
moran.test(sidsres, col.B)
#fitting poisson model with covariates
quasip_mod.1 <- glm(data=ohio_canc2, Obs ~ lat + lon, offset=log(Exp), family=quasipoisson())
summary(quasip_mod.1)         #latitude is higly significant (p=0.0018), lon is not (p=0.132)
sidsres.1 <- residuals(quasip_mod.1, type="pearson")
moran.test(sidsres.1, col.W)
moran.test(sidsres.1, col.B)
# kappaest <- kappaval(ohio_canc$Obs, mod$fitted, mod$df.resid)
# nMC <- 1000
# ncts <- length(ohio_canc$Exp)
# yMC <- matrix(rpois(n=nMC * ncts, lambda=ohio_canc$Exp),
#               nrow=ncts, ncol=nMC)
# kappaMC <- NULL
# for (i in 1:nMC){
#  modMC <- glm(yMC[,i]~1,offset=log(ohio_canc$Exp),family="quasipoisson")
#  kappaMC[i] <- kappaval(yMC[,i],modMC$fitted,modMC$df.resid)
# }
#Geary test on non-adjusted data
geary.test(sidsres,col.W)
geary.test(sidsres, col.B)
#Geary test on adjusted data
geary.test(sidsres.1, col.W)
geary.test(sidsres.1, col.B)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
getLabelPoint <- function(fips) {
Polygon(fips[c("INTPTLON00", "INTPTLAT00")])@labpt
}
oh_df <- map_data("county", "ohio")
summary(oh_df)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
ohmap2 <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
#first,  form a matrix containing the centroids
getLabelPoint <- function(fips) {
Polygon(fips[c("INTPTLON00", "INTPTLAT00")])@labpt
}
#create dataframe from map data
#oh_df <- map_data("county", "ohio")
oh_df <- map_data("county", "ohio")
centOH <- by(oh_df, oh_df$subregion, getLabelPoint)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
ohmap2 <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
#first,  form a matrix containing the centroids
getLabelPoint <- function(county) {
Polygon(fips[c("INTPTLON00", "INTPTLAT00")])@labpt
}
#create dataframe from map data
#oh_df <- map_data("county", "ohio")
oh_df <- map_data("county", "ohio")
centOH <- by(oh_df, oh_df$subregion, getLabelPoint)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
ohmap2 <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
#first,  form a matrix containing the centroids
getLabelPoint <- function(county) {
Polygon(county[c("INTPTLON00", "INTPTLAT00")])@labpt
}
#create dataframe from map data
#oh_df <- map_data("county", "ohio")
oh_df <- map_data("county", "ohio")
centOH <- by(oh_df, oh_df$subregion, getLabelPoint)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
ohmap2 <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
#first,  form a matrix containing the centroids
getLabelPoint <- function(county) {
Polygon(county[c("long", "lat")])@labpt
}
#create dataframe from map data
#oh_df <- map_data("county", "ohio")
oh_df <- map_data("county", "ohio")
centOH <- by(oh_df, oh_df$subregion, getLabelPoint)
centOH <- do.call("rbind.data.frame", centOH)
names(centOH)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
ohmap2 <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
#first,  form a matrix containing the centroids
getLabelPoint <- function(county) {
Polygon(county[c("long", "lat")])@labpt
}
#create dataframe from map data
#oh_df <- map_data("county", "ohio")
oh_df <- map_data("county", "ohio")
centOH <- by(oh_df, oh_df$subregion, getLabelPoint)
centOH <- do.call("rbind.data.frame", centOH)
names(centOH)
centroids <- matrix(0, nrow=n, ncol=2)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
ohmap2 <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
#first,  form a matrix containing the centroids
getLabelPoint <- function(county) {
Polygon(county[c("long", "lat")])@labpt
}
#create dataframe from map data
#oh_df <- map_data("county", "ohio")
oh_df <- map_data("county", "ohio")
centOH <- by(oh_df, oh_df$subregion, getLabelPoint)
centOH <- do.call("rbind.data.frame", centOH)
names(centOH) <- c("long", "lat")
centroids <- matrix(0, nrow=n, ncol=2)
library(SpatialEpi)
pop.upper.bound <- 0.2
n.simulations <- 999
alpha.level <- 0.05
#need to create this - slide 39?
#geo <- latlong2grid(coordinates(ohmap))
ohmap2 <- readShapeSpatial(system.file("shapes/sids.shp",
package = "maptools")[1], IDvar = "FIPSNO",
proj4string = CRS("+proj=longlat +ellps=clrk66"))
#first,  form a matrix containing the centroids
getLabelPoint <- function(county) {
Polygon(county[c("long", "lat")])@labpt
}
#create dataframe from map data
#oh_df <- map_data("county", "ohio")
oh_df <- map_data("county", "ohio")
centOH <- by(oh_df, oh_df$subregion, getLabelPoint)
centOH <- do.call("rbind.data.frame", centOH)
names(centOH) <- c("long", "lat")
